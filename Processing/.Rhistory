groups = ggm_groups7, color = ggm_colors,
legend=F, title = "Anger = 7", title.cex = 20,
label.scale = F, label.cex = 11,
edge.color=edge_col7,
borders =  T, esize = 20, vsize = 10
)
set.seed(1)
Graph_cond_3 = qgraph(Graph_cond_3, layout = L,
labels = shortnames_23,
groups = ggm_groups3, color = ggm_colors,
legend=F, title = "Anger = 3", title.cex = 20,
label.scale = F, label.cex = 11,
edge.color=edge_col3,
borders =  T, esize = 20, vsize = 10
)
set.seed(1)
Graph_cond_10 = qgraph(Graph_cond_10, layout = L,
labels = shortnames_23,
groups = ggm_groups10, color = ggm_colors,
legend=F, title = "Anger = 10", title.cex = 20,
label.scale = F, label.cex = 11,
edge.color=edge_col10,
borders =  T, esize = 20, vsize = 10
)
dev.off()
#fit
#CANFit <- IsingFit(issp_2019_can, gamma = 0.05)
CANFit <- IsingFit(issp_2019_can, gamma = 0.25)
#plot
CANGraph<-qgraph(CANFit$weiadj, layout = averageLayout(GraphMGM),
labels = shortnames_22, nodeNames = longnames_22,
groups = ggm_groups, color = ggm_colors,
label.scale = F, label.cex = 0.7,
legend=T,  legend.cex = 0.30, theme = "Borkulo",
borders = T, vsize=7.0, esize = 15, GLratio = 2,
filetype="jpg", filename=here("Output", "Fig_4.1"))
#centrality
centrality_can_graph = centralityPlot(CANGraph, labels = longnames_22,
orderBy = "Strength",
scale = "z-scores")
centrality_can_graph = centrality_can_graph +
geom_vline(xintercept=0, linetype="dotted") +
scale_x_continuous(limits = c(-2,2.5), breaks = c(-2,-1,0,1,2)) +
# theme_nice() +
theme(axis.text.y=element_text(hjust=1))
ggsave(here("Output", "Fig_4.2.jpg"), centrality_can_graph,
height = 4, width = 11)
#combined centrality tables
centrality_combined = centralityPlot(list(GGM=GraphMGM,Ising=CANGraph), include = c("Strength"),
scale = "z-scores", orderBy = "Strength") +
geom_vline(xintercept=0, linetype="dotted") +
scale_x_continuous(limits = c(-2,2.8)) +
# theme_nice() +
theme(axis.text.y=element_text(hjust=1))
ggsave(here("Output", "Supplement", "Fig1.jpg"), centrality_combined,
height = 4)
#Combined Figure_4
# Load the individual images
img1 <- image_read(here("Output", "Fig_4.1.jpg"))
img2 <- image_read(here("Output", "Fig_4.2.jpg"))
# Combine the images vertically
combined_img <- image_append(c(img1, img2), stack = TRUE)
# Save the combined image
image_write(combined_img, path = here("Output", "Fig_4.jpg"))
dev.off()
# Save as PDF
pdf(here("Output", "PDF", "Fig_4.pdf"), height = 12, width = 8)
plot(combined_img)
dev.off()
# Save as PDF
image_write(combined_img, path = here("Output", "PDF", "Fig_4.pdf"), format = "pdf")
#Simulation input
SimInput <- LinTransform(CANFit$weiadj, CANFit$thresholds) #The LinTransform function rescales the edge weights and thresholds, so that a threshold of 0 indicates that a node has no disposition to be in a given state and a positive (negative) threshold indicates that a node has the disposition to be "on" ("off")
#create objects
shortnames_1 = shortnames_22[1]
shortnames_2 = shortnames_22[2]
shortnames_3 = shortnames_22[3]
shortnames_4 = shortnames_22[4]
shortnames_5 = shortnames_22[5]
shortnames_6 = shortnames_22[6]
shortnames_7 = shortnames_22[7]
shortnames_8 = shortnames_22[8]
shortnames_9 = shortnames_22[9]
shortnames_10 = shortnames_22[10]
shortnames_11 = shortnames_22[11]
shortnames_12 = shortnames_22[12]
shortnames_13 = shortnames_22[13]
shortnames_14 = shortnames_22[14]
shortnames_15 = shortnames_22[15]
shortnames_16 = shortnames_22[16]
shortnames_17 = shortnames_22[17]
shortnames_18 = shortnames_22[18]
shortnames_19 = shortnames_22[19]
shortnames_20 = shortnames_22[20]
shortnames_21 = shortnames_22[21]
shortnames_22 = shortnames_22[22]
#samples with single nodes positive disposition
set.seed(123)
SampleNeg <- IsingSampler(3000, SimInput$graph,
rep(-.1,22),#this argument specifies the thresholds, which are all set to -.1
responses = c(-1L,1L))
Sample_1 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,0),
1,#this sets the thesholds of the first node to 1
rep(-.1,21)),#this sets the threshold of the others node to -.1
responses = c(-1L,1L))
Sample_2 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,1),#this sets the threshold of the first node to -.1
1,#this sets the thesholds of the second node to 1
rep(-.1,20)),#this sets the threshold of the others node to -.1
responses = c(-1L,1L))
Sample_3 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,2),
1,
rep(-.1,19)),
responses = c(-1L,1L))
Sample_4 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,3),
1,
rep(-.1,18)),
responses = c(-1L,1L))
Sample_5 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,4),
1,
rep(-.1,17)),
responses = c(-1L,1L))
Sample_6 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,5),
1,
rep(-.1,16)),
responses = c(-1L,1L))
Sample_7 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,6),
1,
rep(-.1,15)),
responses = c(-1L,1L))
Sample_8 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,7),
1,
rep(-.1,14)),
responses = c(-1L,1L))
Sample_9 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,8),
1,
rep(-.1,13)),
responses = c(-1L,1L))
Sample_10 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,9),
1,
rep(-.1,12)),
responses = c(-1L,1L))
Sample_11 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,10),
1,
rep(-.1,11)),
responses = c(-1L,1L))
Sample_12 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,11),
1,
rep(-.1,10)),
responses = c(-1L,1L))
Sample_13 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,12),
1,
rep(-.1,9)),
responses = c(-1L,1L))
Sample_14 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,13),
1,
rep(-.1,8)),
responses = c(-1L,1L))
Sample_15 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,14),
1,
rep(-.1,7)),
responses = c(-1L,1L))
Sample_16 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,15),
1,
rep(-.1,6)),
responses = c(-1L,1L))
Sample_17 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,16),
1,
rep(-.1,5)),
responses = c(-1L,1L))
Sample_18 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,17),
1,
rep(-.1,4)),
responses = c(-1L,1L))
Sample_19 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,18),
1,
rep(-.1,3)),
responses = c(-1L,1L))
Sample_20 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,19),
1,
rep(-.1,2)),
responses = c(-1L,1L))
Sample_21 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,20),
1,
rep(-.1,1)),
responses = c(-1L,1L))
Sample_22 <- IsingSampler(3000, SimInput$graph,
c(rep(-.1,21),
1,
rep(-.1,0)),
responses = c(-1L,1L))
allsamples <- rbind(SampleNeg,
Sample_1,
Sample_2,
Sample_3,
Sample_4,
Sample_5,
Sample_6,
Sample_7,
Sample_8,
Sample_9,
Sample_10,
Sample_11,
Sample_12,
Sample_13,
Sample_14,
Sample_15,
Sample_16,
Sample_17,
Sample_18,
Sample_19,
Sample_20,
Sample_21,
Sample_22)
rowname <- rep(c('Baseline',
glue('Intervention on {shortnames_1}'),
glue('Intervention on {shortnames_2}'),
glue('Intervention on {shortnames_3}'),
glue('Intervention on {shortnames_4}'),
glue('Intervention on {shortnames_5}'),
glue('Intervention on {shortnames_6}'),
glue('Intervention on {shortnames_7}'),
glue('Intervention on {shortnames_8}'),
glue('Intervention on {shortnames_9}'),
glue('Intervention on {shortnames_10}'),
glue('Intervention on {shortnames_11}'),
glue('Intervention on {shortnames_12}'),
glue('Intervention on {shortnames_13}'),
glue('Intervention on {shortnames_14}'),
glue('Intervention on {shortnames_15}'),
glue('Intervention on {shortnames_16}'),
glue('Intervention on {shortnames_17}'),
glue('Intervention on {shortnames_18}'),
glue('Intervention on {shortnames_19}'),
glue('Intervention on {shortnames_20}'),
glue('Intervention on {shortnames_21}'),
glue('Intervention on {shortnames_22}')),
each=3000)
row.names(allsamples) <- rowname
#calculate the sum scores of the different networks
sumSampleall<-apply(allsamples, 1, sum)
sumscores<- data.frame(sumSampleall,rowname)
meansumscores<-aggregate(sumscores$sumSampleall, by=list(sumscores$rowname), mean)
sdsumscores<-aggregate(sumscores$sumSampleall, by=list(sumscores$rowname), sd)
graphicsumscores<- data.frame(meansumscores,sdsumscores)
#calculate confidence intervals for sumscore means
m<-graphicsumscores$x
s<-graphicsumscores$x.1
u<-m+1.96*s/sqrt(3000)
l<-m-1.96*s/sqrt(3000)
confi<- cbind(graphicsumscores, m, u, l)
names<-confi$Group.1
graph<-data.frame(confi,names)
graph$names <- factor(graph$names, levels = graph$names[order(graph$m)])
graph$names
#descriptives
confi_des = confi %>%
arrange(m)
#calculate the sum scores of the different networks
sumSampleall<-apply(allsamples, 1, sum)
sumscores<- data.frame(sumSampleall,rowname)
meansumscores<-aggregate(sumscores$sumSampleall, by=list(sumscores$rowname), mean)
sdsumscores<-aggregate(sumscores$sumSampleall, by=list(sumscores$rowname), sd)
graphicsumscores<- data.frame(meansumscores,sdsumscores)
#calculate confidence intervals for sumscore means
m<-graphicsumscores$x
s<-graphicsumscores$x.1
u<-m+1.96*s/sqrt(3000)
l<-m-1.96*s/sqrt(3000)
confi<- cbind(graphicsumscores, m, u, l)
names<-confi$Group.1
graph<-data.frame(confi,names)
graph$names <- factor(graph$names, levels = graph$names[order(graph$m)])
graph$names
#descriptives
confi_des = confi %>%
arrange(m)
#forestplot for the means of sumscores
mean_SampleNeg = meansumscores %>%
slice(1) %>%
pull(x)
upper_SampleNeg = u[1]
credplot.gg <- function(graph){
require(ggplot2)
p <- ggplot(graph, aes(x=names, y=m, ymin=l, ymax=u))+
geom_pointrange()+
geom_hline(yintercept = upper_SampleNeg, linetype="dashed")+
geom_hline(yintercept = upper_SampleNeg+2, linetype="dotted")+
scale_y_continuous(limits = c(-6,-1)) +
coord_flip()+
xlab('')+
ylab('Mean sum scores')+
theme_minimal()+
theme(axis.text.y=element_text(hjust=1))
return(p)
}
meansumscores_plot = credplot.gg(graph)
# jpg
ggsave(here("Output", "Fig_5.jpg"), meansumscores_plot, height = 4, width = 8)
# pdf
ggsave(here("Output", "PDF", "Fig_5.pdf"), meansumscores_plot, height = 4, width = 8,
dpi = 600,
device = "pdf")
# Save as EPS
setEPS()
postscript(file = here("Output", "EPS", "Fig_5.eps"),
width = 8, height = 4,
horizontal = FALSE,
paper = "special",
onefile = FALSE)
print(meansumscores_plot)
# Close the EPS device
dev.off()
knitr::opts_chunk$set(echo = TRUE)
#libraries
library(pacman)
p_load(tidyverse, janitor, here, haven, labelled, sjmisc, skimr,
stargazer, IsingFit, qgraph, Matrix, igraph, NetworkComparisonTest, bootnet,
rio, IsingSampler, compute.es, foreign, mgm, matrixcalc, openxlsx, Rcpp,
forestplot, ggplot2, compute.es, jtools, glue, EGAnet, signnet, magick)
#remove scipen
options(scipen=999)
#Import dataset
load(here("Input", "usa_data.RData"))
shortnames_22 = names(issp_2019_nodes)
shortnames_23 = names(issp_2019_anger)
longnames_22 <- c("Perception of large income inequality (p_income)",
"Perception of tax regressivity (p_tax)",
"Belief in progressive taxation (b_tax)",
"Judgment of unfair distribution (j_income)",
"Judgment of political distrust in redistribution (j_distrust)",
"Judgment of failure of public redistribution (j_failure)",
"Importance of wealthy family (e_weafam)",
"Importance of parental education (e_edupar)",
"Importance of education (e_edu)",
"Importance of hard work (e_work)",
"Importance of knowing right people (e_people)",
"Importance of political connections (e_connec)",
"Importance of giving bribes (e_bribes)",
"Importance of race (e_race)",
"Importance of religion (e_relig)",
"Importance of sex (e_sex)",
"Belief in public redistribution (b_public)",
"Belief in market redistribution (b_market)",
"Pay criteria, Responsibility (b_resp)",
"Pay criteria, Training (b_train)",
"Pay criteria, Need (b_need)",
"Pay criteria, Merit (b_merit)")
legendnames_22 <- c("Perception of large income inequality",
"Perception of tax regressivity",
"Belief in progressive taxation",
"Judgment of unfair distribution",
"Judgment of political distrust in redistribution",
"Judgment of failure of public redistribution",
"Importance of wealthy family",
"Importance of parental education",
"Importance of education",
"Importance of hard work",
"Importance of knowing right people",
"Importance of political connections",
"Importance of giving bribes",
"Importance of race",
"Importance of religion",
"Importance of sex",
"Belief in public redistribution",
"Belief in market redistribution",
"Pay criteria: Responsibility",
"Pay criteria: Training",
"Pay criteria: Need",
"Pay criteria: Merit")
#remove haven labels
issp_2019_nodes = sapply(issp_2019_nodes, haven::zap_labels)
issp_2019_can = sapply(issp_2019_can, haven::zap_labels)
issp_2019_anger = sapply(issp_2019_anger, haven::zap_labels)
#Communities
ega_results <- EGA(
data = issp_2019_nodes,
method = "glasso",         # "glasso" for GGM estimation with graphical LASSO
community_detection = "walktrap" # Default
)
ega_results$wc
#colors
ggm_groups = list(
"Views on inequality"=c(1,2,3,4,5,6,17,18),
"Mixed factors"=c(7,8,11,12,13,21),
"Individualist factors"=c(9,10,19,20,22),
"Structuralist factors"=c(14,15,16)
)
# ega_colors <- c(
#   "#E41A1C", # Red
#   "#377EB8", # Blue
#   "#4DAF4A", # Green
#   "#984EA3", # Purple
#   "#FF7F00", # Orange
#   "#FFFF33", # Yellow
#   "#A65628", # Brown
#   "#F781BF"  # Pink
# )
ggm_colors <- c("#FBB4AE",  "#A6D9E0", "#CCEBC5", "#FDDA77")
#fit mgm
mgm_issp_2019_nodes = mgm(issp_2019_nodes, type = rep("g",22),
level = rep(1, 22), lambdaSel = "EBIC", ruleReg = "OR")
#predictability
pred_obj <- predict(object = mgm_issp_2019_nodes,
data = issp_2019_nodes,
errorCon = 'R2')
#descriptives
mgm_nodes_desc = as.vector(mgm_issp_2019_nodes$pairwise$wadj)
length(mgm_nodes_desc[mgm_nodes_desc != 0])/462
pred_df = pred_obj$errors %>%
arrange(R2)
#plot
set.seed(100)
GraphMGM<-qgraph(mgm_issp_2019_nodes$pairwise$wadj, layout = 'spring',
labels = shortnames_22, nodeNames = legendnames_22,
groups = ggm_groups, color = ggm_colors,
legend=T, legend.cex = 0.33,
label.scale = F, label.cex = 0.7,
edge.color=mgm_issp_2019_nodes$pairwise$edgecolor_cb,
borders = T, vsize=7.0, esize = 15, GLratio = 2,
pie = pred_obj$errors[,2], pieColor = rep('gray50',22),
filetype="jpg", filename=here("Output", "Fig_1"))
# PDF
set.seed(100)
GraphMGM<-qgraph(mgm_issp_2019_nodes$pairwise$wadj, layout = 'spring',
labels = shortnames_22, nodeNames = legendnames_22,
groups = ggm_groups, color = ggm_colors,
legend=T, legend.cex = 0.33,
label.scale = F, label.cex = 0.7,
edge.color=mgm_issp_2019_nodes$pairwise$edgecolor_cb,
borders = T, vsize=7.0, esize = 15, GLratio = 2,
pie = pred_obj$errors[,2], pieColor = rep('gray50',22),
filetype="pdf", filename=here("Output", "PDF", "Fig_1"))
# Open EPS device
postscript(file = here("Output", "EPS", "Fig_1.eps"),
width = 10, height = 6,
horizontal = FALSE,
paper = "special",
onefile = FALSE)
# Plot the graph
set.seed(100)
GraphMGM <- qgraph(
mgm_issp_2019_nodes$pairwise$wadj,
layout = 'spring',
labels = shortnames_22,
nodeNames = legendnames_22,
groups = ggm_groups,
color = ggm_colors,
legend = TRUE,
legend.cex = 0.33,
label.scale = FALSE,
label.cex = 0.7,
edge.color = mgm_issp_2019_nodes$pairwise$edgecolor_cb,
borders = TRUE,
vsize = 7.0,
esize = 15,
GLratio = 2,
pie = pred_obj$errors[,2],
pieColor = rep('gray50', 22)
)
# Close the device
dev.off()
# ITA_small_core = qgraph::smallworldness(CANFit$weiadj, B = 1000)
(small_w = NetworkToolbox::smallworldness(mgm_issp_2019_nodes$pairwise$wadj, iter = 1000,
progBar = FALSE, method = c("TJHBL")))
#ASPL
NetworkToolbox::pathlengths(mgm_issp_2019_nodes$pairwise$wadj, weighted = FALSE)
#Clustering
NetworkToolbox::transitivity(mgm_issp_2019_nodes$pairwise$wadj, weighted = FALSE)
#centrality
centrality_mgm_graph = centralityPlot(GraphMGM, labels = longnames_22,
orderBy = "Strength",
scale = "z-scores")
centrality_mgm_graph = centrality_mgm_graph +
geom_vline(xintercept=0, linetype="dotted") +
scale_x_continuous(limits = c(-2,3), breaks = c(-2,-1,0,1,2,3)) +
# theme_nice() +
theme(axis.text.y=element_text(hjust=1))
ggsave(here("Output", "Fig_2.jpg"), centrality_mgm_graph,
height = 4)
# Save as EPS
ggsave(here("Output", "EPS", "Fig_2.eps"),
centrality_mgm_graph,
height = 4, width = 10,
dpi = 600,
device = cairo_ps)
# Save as pdf
ggsave(here("Output", "PDF", "Fig_2.pdf"),
centrality_mgm_graph,
height = 4, width = 8,
dpi = 600,
device = pdf)
